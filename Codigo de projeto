#include <WiFi.h> //biblioteca de uso do wifi no ESP32 (autenticação)
#include <PubSubClient.h> //biblioteca do MQTT
#include <iostream>
#include <string>
#include <Wire.h>
#include "SSD1306Wire.h"

IPAddress local_IP(192, 168, 0, 240);
IPAddress gateway(192, 168, 0, 1);
IPAddress subnet(255, 255, 255, 0);
WiFiClient campainha;
const char* ssid = "Gabriel-Lindo";
const char* password = "999841155";
const char* mqtt_server = "192.168.0.115";
const char* mqtt_topic = "Alarme/feedback";
const uint16_t mqtt_port = 1889;
const char* mqtt_name = "campainha";
const char* mqtt_user = "";
const char* mqtt_password = "";

SSD1306Wire display(0x3c, SDA, SCL);

int contadorEntrada = 0;
int contadorSaida = 0;

float cm, duracao, cm1, cm2;
String buf;

byte rele = 23;

byte pinoTransmissor=32;// trig
byte pinoReceptor=33;//echo



PubSubClient client(campainha);
String recebido, toprint, buff, lasttemp;
double lastMsg, timeset;

void checarwifi(){
  if(WiFi.status() != WL_CONNECTED) {
        display.clear();
    display.drawString(0, 0, "Wifi Desconectado!");
    display.display();
    setup_wifi();
  }
}

void callback(char* topic, byte* message, unsigned int length) {
  String messageTemp;
    for (int i = 0; i < length; i++) {
    messageTemp += (char)message[i];
  }

  if (String(topic) == mqtt_topic) {
    Serial.println(messageTemp);
    recebido = messageTemp;
   }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect(mqtt_name)) {
      display.clear();
      display.drawString(0, 0, "MQTT conectado!");
      display.display();
      client.subscribe(mqtt_topic);
      delay(2000);
    } else {
      checarwifi();
      display.clear();
      display.drawString(0, 0, "Erro ao conectar MQTT!");
      display.display();
      client.setServer(mqtt_server, mqtt_port);
      client.setCallback(callback);
      delay(2500);
    }
  }
}


void setup_wifi() {
WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
        display.clear();
    display.drawString(0, 0, "Conectando Wifi!");
    display.display();
    delay(5000);
  }
      display.clear();
    display.drawString(0, 0, "Wifi conectado!");
    display.display();
}

void setup() {

  pinMode(pinoTransmissor, OUTPUT);
  pinMode(pinoReceptor, INPUT);

  pinMode(rele, OUTPUT);  


  Serial.begin(115200);
  Serial.println("iniciando...");
  
  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_24);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.clear();
    display.drawString(0, 0, "iniciando wifi");
    display.display();
    delay(2000);
setup_wifi();
client.setServer(mqtt_server, mqtt_port);
client.setCallback(callback);
}



void loop()
{
  if (!client.connected()) {
  reconnect();
  }

  client.loop();

  cm =  distancia();
  if(cm >0 && cm<=2){
    cm1 = cm;
    delay (10);
    cm2 = cm;

    if (cm1 >= cm2){
    display.clear();
    display.drawString(0, 0, "Bem vindo!");
    display.display();
    client.publish("Alarme", "Alguem entrou!");
    contadorEntrada = contadorEntrada+1;
    buf = String (contadorEntrada);
    client.publish("Entrada", buf.c_str());
    checkrele();
    delay(100);
    display.clear();
    
  } 
  else{
    display.clear();
    display.drawString(0, 0, "Até breve!");
    display.display();
    client.publish("Alarme", "Alguem saiu!");
    contadorSaida = contadorSaida+1;
    buf = String (contadorSaida);
    client.publish("Saida", buf.c_str());
    checkrele();
    delay(100);
    display.clear();
  }
  }
  
}

float distancia()
{  
  digitalWrite(pinoTransmissor, LOW);
  delayMicroseconds(5); 
  digitalWrite(pinoTransmissor, HIGH); 
  delayMicroseconds(10);
  digitalWrite(pinoTransmissor, LOW);
  duracao = pulseIn(pinoReceptor, HIGH);
  float calcDistancia= (duracao/2) * 0.0343;
  if (calcDistancia>=331){
      calcDistancia=0;
  }
  return calcDistancia;  
}

float checkrele(){
  if (contadorEntrada == contadorSaida){
     digitalWrite(rele,LOW);
  }
  else{
    digitalWrite(rele, HIGH);
  }
}
